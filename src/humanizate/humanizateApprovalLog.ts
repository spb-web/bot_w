import type { MessagePayloadType } from '@/libs/TgBot'
import type { ApprovalTokenEvent } from '@/watchers/approval'
import type { BaseTargetEventWithTransactionAndBalance } from '@/entries'
import { toLocaleString } from '../utils/toLocaleString'
import { getBalanceString } from './getBalanceString'
import { getStakedBalance } from './getStakedBalance'
import { project } from '../projects'
import { getButtons } from './getButtons'
import { BigNumber } from 'bignumber.js'

// –ß—É—Ç—å –º–µ–Ω—å—à–µ, —Ç.–∫. –Ω–µ –≤–µ–∑–¥–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∞–ø—Ä—É–≤
const MAX_AMOUNT = new BigNumber('0x0fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')

export const humanizateApprovalLog = (log:BaseTargetEventWithTransactionAndBalance<ApprovalTokenEvent>): MessagePayloadType => {
  const amountStr = MAX_AMOUNT.lte(log.rawAmount) ? '–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª-–≤–∞' : toLocaleString(log.amount)
  const exchageName = `–Ω–∞ #${log.exchageName}`
  const response = log.transaction.response
  const symbol = log.token.symbol
  const sender = response ? `–° –∫–æ—à–µ–ª—å–∫–∞ \`\`\`${response.from}\`\`\`` : '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–¥—Ä–µ—Å'
  const targetTokenBalance = getBalanceString(log.senderBalance)
  const targetTokenStaked = getStakedBalance(log.senderStaked)

  let text = `üîë #–ê–ø–ø—Ä—É–≤ ${amountStr} ${symbol} ${exchageName} \n${sender}\n${targetTokenBalance}\n${targetTokenStaked}`

  return {
    chatId: project.telegram.whalesChatId,
    text,
    extra: {
      reply_markup: getButtons(log),
    },
  }
}
